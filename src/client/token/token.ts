/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API de Gerenciamento do louvor
 * Organizador das musicas e gerenciamento de escala√ß√µes do louvor da igreja
 * OpenAPI spec version: v1
 */
import type { TokenObtainPair, TokenRefresh } from '.././schemas'

import { customFetcher } from '../../services/customFetcher'

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >
}[keyof T]

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never

type Writable<T> = Pick<T, WritableKeys<T>>
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P]
    }
  : DistributeReadOnlyOverUnions<T>

export type tokenCreateResponse201 = {
  data: TokenObtainPair
  status: 201
}

export type tokenCreateResponseComposite = tokenCreateResponse201

export type tokenCreateResponse = tokenCreateResponseComposite & {
  headers: Headers
}

export const getTokenCreateUrl = () => {
  return `/token/`
}

export const tokenCreate = async (
  tokenObtainPair: TokenObtainPair,
  options?: RequestInit
): Promise<tokenCreateResponse> => {
  return customFetcher<tokenCreateResponse>(getTokenCreateUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(tokenObtainPair)
  })
}

export type tokenRefreshCreateResponse201 = {
  data: TokenRefresh
  status: 201
}

export type tokenRefreshCreateResponseComposite = tokenRefreshCreateResponse201

export type tokenRefreshCreateResponse = tokenRefreshCreateResponseComposite & {
  headers: Headers
}

export const getTokenRefreshCreateUrl = () => {
  return `/token/refresh/`
}

export const tokenRefreshCreate = async (
  tokenRefresh: NonReadonly<TokenRefresh>,
  options?: RequestInit
): Promise<tokenRefreshCreateResponse> => {
  return customFetcher<tokenRefreshCreateResponse>(getTokenRefreshCreateUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(tokenRefresh)
  })
}
