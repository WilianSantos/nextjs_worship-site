// This file is auto-generated by @hey-api/openapi-ts

import type {
  PraiseMeListResponse,
  PraiseMemberListResponse,
  PraiseMemberCreateResponse,
  PraiseMemberReadResponse,
  PraiseMemberPartialUpdateResponse,
  PraiseMemberUpdateResponse,
  PraiseMusicListResponse,
  PraiseMusicCreateResponse,
  PraiseMusicMusicsResponse,
  PraiseMusicReadResponse,
  PraiseMusicPartialUpdateResponse,
  PraiseMusicUpdateResponse,
  PraisePlaylistListResponse,
  PraisePlaylistCreateResponse,
  PraisePlaylistReadResponse,
  PraisePlaylistPartialUpdateResponse,
  PraisePlaylistUpdateResponse,
  PraisePraiseLineupListResponse,
  PraisePraiseLineupCreateResponse,
  PraisePraiseLineupReadResponse,
  PraisePraiseLineupPartialUpdateResponse,
  PraisePraiseLineupUpdateResponse,
  PraiseScaleHistoryListResponse
} from './types.gen'

const memberMeSchemaResponseTransformer = (data: any) => {
  if (data.created_at) {
    data.created_at = new Date(data.created_at)
  }
  if (data.updated_at) {
    data.updated_at = new Date(data.updated_at)
  }
  return data
}

export const praiseMeListResponseTransformer = async (
  data: any
): Promise<PraiseMeListResponse> => {
  data = memberMeSchemaResponseTransformer(data)
  return data
}

const memberSchemaResponseTransformer = (data: any) => {
  if (data.created_at) {
    data.created_at = new Date(data.created_at)
  }
  if (data.updated_at) {
    data.updated_at = new Date(data.updated_at)
  }
  return data
}

export const praiseMemberListResponseTransformer = async (
  data: any
): Promise<PraiseMemberListResponse> => {
  data.results = data.results.map((item: any) => {
    return memberSchemaResponseTransformer(item)
  })
  return data
}

export const praiseMemberCreateResponseTransformer = async (
  data: any
): Promise<PraiseMemberCreateResponse> => {
  data = memberSchemaResponseTransformer(data)
  return data
}

export const praiseMemberReadResponseTransformer = async (
  data: any
): Promise<PraiseMemberReadResponse> => {
  data = memberSchemaResponseTransformer(data)
  return data
}

export const praiseMemberPartialUpdateResponseTransformer = async (
  data: any
): Promise<PraiseMemberPartialUpdateResponse> => {
  data = memberSchemaResponseTransformer(data)
  return data
}

export const praiseMemberUpdateResponseTransformer = async (
  data: any
): Promise<PraiseMemberUpdateResponse> => {
  data = memberSchemaResponseTransformer(data)
  return data
}

const musicSerializersSchemaResponseTransformer = (data: any) => {
  if (data.created_at) {
    data.created_at = new Date(data.created_at)
  }
  if (data.updated_at) {
    data.updated_at = new Date(data.updated_at)
  }
  return data
}

export const praiseMusicListResponseTransformer = async (
  data: any
): Promise<PraiseMusicListResponse> => {
  data.results = data.results.map((item: any) => {
    return musicSerializersSchemaResponseTransformer(item)
  })
  return data
}

export const praiseMusicCreateResponseTransformer = async (
  data: any
): Promise<PraiseMusicCreateResponse> => {
  data = musicSerializersSchemaResponseTransformer(data)
  return data
}

export const praiseMusicMusicsResponseTransformer = async (
  data: any
): Promise<PraiseMusicMusicsResponse> => {
  if (data.musics) {
    data.musics = data.musics.map((item: any) => {
      if (item.created_at) {
        item.created_at = new Date(item.created_at)
      }
      if (item.updated_at) {
        item.updated_at = new Date(item.updated_at)
      }
      return item
    })
  }
  return data
}

export const praiseMusicReadResponseTransformer = async (
  data: any
): Promise<PraiseMusicReadResponse> => {
  data = musicSerializersSchemaResponseTransformer(data)
  return data
}

export const praiseMusicPartialUpdateResponseTransformer = async (
  data: any
): Promise<PraiseMusicPartialUpdateResponse> => {
  data = musicSerializersSchemaResponseTransformer(data)
  return data
}

export const praiseMusicUpdateResponseTransformer = async (
  data: any
): Promise<PraiseMusicUpdateResponse> => {
  data = musicSerializersSchemaResponseTransformer(data)
  return data
}

const playlistSerializersSchemaResponseTransformer = (data: any) => {
  if (data.created_at) {
    data.created_at = new Date(data.created_at)
  }
  if (data.updated_at) {
    data.updated_at = new Date(data.updated_at)
  }
  if (data.playlist_date) {
    data.playlist_date = new Date(data.playlist_date)
  }
  return data
}

export const praisePlaylistListResponseTransformer = async (
  data: any
): Promise<PraisePlaylistListResponse> => {
  data.results = data.results.map((item: any) => {
    return playlistSerializersSchemaResponseTransformer(item)
  })
  return data
}

export const praisePlaylistCreateResponseTransformer = async (
  data: any
): Promise<PraisePlaylistCreateResponse> => {
  data = playlistSerializersSchemaResponseTransformer(data)
  return data
}

export const praisePlaylistReadResponseTransformer = async (
  data: any
): Promise<PraisePlaylistReadResponse> => {
  data = playlistSerializersSchemaResponseTransformer(data)
  return data
}

export const praisePlaylistPartialUpdateResponseTransformer = async (
  data: any
): Promise<PraisePlaylistPartialUpdateResponse> => {
  data = playlistSerializersSchemaResponseTransformer(data)
  return data
}

export const praisePlaylistUpdateResponseTransformer = async (
  data: any
): Promise<PraisePlaylistUpdateResponse> => {
  data = playlistSerializersSchemaResponseTransformer(data)
  return data
}

const praiseLineupSerializersSchemaResponseTransformer = (data: any) => {
  if (data.created_at) {
    data.created_at = new Date(data.created_at)
  }
  if (data.updated_at) {
    data.updated_at = new Date(data.updated_at)
  }
  if (data.lineup_date) {
    data.lineup_date = new Date(data.lineup_date)
  }
  return data
}

export const praisePraiseLineupListResponseTransformer = async (
  data: any
): Promise<PraisePraiseLineupListResponse> => {
  data.results = data.results.map((item: any) => {
    return praiseLineupSerializersSchemaResponseTransformer(item)
  })
  return data
}

export const praisePraiseLineupCreateResponseTransformer = async (
  data: any
): Promise<PraisePraiseLineupCreateResponse> => {
  data = praiseLineupSerializersSchemaResponseTransformer(data)
  return data
}

export const praisePraiseLineupReadResponseTransformer = async (
  data: any
): Promise<PraisePraiseLineupReadResponse> => {
  data = praiseLineupSerializersSchemaResponseTransformer(data)
  return data
}

export const praisePraiseLineupPartialUpdateResponseTransformer = async (
  data: any
): Promise<PraisePraiseLineupPartialUpdateResponse> => {
  data = praiseLineupSerializersSchemaResponseTransformer(data)
  return data
}

export const praisePraiseLineupUpdateResponseTransformer = async (
  data: any
): Promise<PraisePraiseLineupUpdateResponse> => {
  data = praiseLineupSerializersSchemaResponseTransformer(data)
  return data
}

export const praiseScaleHistoryListResponseTransformer = async (
  data: any
): Promise<PraiseScaleHistoryListResponse> => {
  if (data.scales) {
    data.scales = data.scales.map((item: any) => {
      if (item.lineup_date) {
        item.lineup_date = new Date(item.lineup_date)
      }
      return item
    })
  }
  return data
}
