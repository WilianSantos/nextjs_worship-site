// This file is auto-generated by @hey-api/openapi-ts

export const ChangePasswordSchema = {
  required: ['old_password', 'new_password'],
  type: 'object',
  properties: {
    old_password: {
      title: 'Old password',
      type: 'string',
      minLength: 1
    },
    new_password: {
      title: 'New password',
      type: 'string',
      minLength: 1
    }
  }
} as const

export const UserSerializersSchema = {
  required: ['password', 'username'],
  type: 'object',
  properties: {
    id: {
      title: 'ID',
      type: 'integer',
      readOnly: true
    },
    password: {
      title: 'Senha',
      type: 'string',
      maxLength: 128,
      minLength: 1
    },
    username: {
      title: 'Usuário',
      description:
        'Obrigatório. 150 caracteres ou menos. Letras, números e @/./+/-/_ apenas.',
      type: 'string',
      pattern: '^[\\w.@+-]+$',
      maxLength: 150,
      minLength: 1
    },
    first_name: {
      title: 'Primeiro nome',
      type: 'string',
      maxLength: 150
    },
    last_name: {
      title: 'Último nome',
      type: 'string',
      maxLength: 150
    },
    email: {
      title: 'Endereço de email',
      type: 'string',
      format: 'email',
      maxLength: 254
    }
  }
} as const

export const MemberFunctionsSerializersSchema = {
  required: ['function_name'],
  type: 'object',
  properties: {
    id: {
      title: 'ID',
      type: 'integer',
      readOnly: true
    },
    function_name: {
      title: 'Function name',
      type: 'string',
      maxLength: 50,
      minLength: 1
    }
  }
} as const

export const MemberMeSchema = {
  required: ['name'],
  type: 'object',
  properties: {
    id: {
      title: 'ID',
      type: 'integer',
      readOnly: true
    },
    user: {
      $ref: '#/components/schemas/UserSerializers'
    },
    function: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/MemberFunctionsSerializers'
      },
      readOnly: true
    },
    profile_picture: {
      title: 'Profile picture',
      type: 'string',
      readOnly: true
    },
    created_at: {
      title: 'Created at',
      type: 'string',
      format: 'date-time',
      readOnly: true
    },
    updated_at: {
      title: 'Updated at',
      type: 'string',
      format: 'date-time',
      readOnly: true
    },
    name: {
      title: 'Name',
      type: 'string',
      maxLength: 150,
      minLength: 1
    },
    availability: {
      title: 'Availability',
      type: 'boolean'
    },
    cell_phone: {
      title: 'Cell phone',
      type: 'string',
      maxLength: 14
    }
  }
} as const

export const MemberSchema = {
  required: ['name', 'user', 'function'],
  type: 'object',
  properties: {
    id: {
      title: 'ID',
      type: 'integer',
      readOnly: true
    },
    created_at: {
      title: 'Created at',
      type: 'string',
      format: 'date-time',
      readOnly: true
    },
    updated_at: {
      title: 'Updated at',
      type: 'string',
      format: 'date-time',
      readOnly: true
    },
    name: {
      title: 'Name',
      type: 'string',
      maxLength: 150,
      minLength: 1
    },
    availability: {
      title: 'Availability',
      type: 'boolean'
    },
    cell_phone: {
      title: 'Cell phone',
      type: 'string',
      maxLength: 14
    },
    profile_picture: {
      title: 'Profile picture',
      type: 'string',
      readOnly: true,
      format: 'uri',
      nullable: true
    },
    user: {
      title: 'User',
      type: 'integer'
    },
    function: {
      type: 'array',
      items: {
        type: 'integer'
      },
      uniqueItems: true
    }
  }
} as const

export const MusicCategorySerializersSchema = {
  required: ['category_name'],
  type: 'object',
  properties: {
    id: {
      title: 'ID',
      type: 'integer',
      readOnly: true
    },
    category_name: {
      title: 'Category name',
      type: 'string',
      maxLength: 50,
      minLength: 1
    }
  }
} as const

export const MusicChordSerializersSchema = {
  required: ['chord_name'],
  type: 'object',
  properties: {
    id: {
      title: 'ID',
      type: 'integer',
      readOnly: true
    },
    chord_name: {
      title: 'Chord name',
      type: 'string',
      maxLength: 10,
      minLength: 1
    },
    chord_image: {
      title: 'Chord image',
      type: 'string',
      readOnly: true,
      format: 'uri',
      nullable: true
    }
  }
} as const

export const MusicSerializersSchema = {
  required: [
    'category',
    'music_chord',
    'music_title',
    'author',
    'music_tone',
    'music_text'
  ],
  type: 'object',
  properties: {
    id: {
      title: 'ID',
      type: 'integer',
      readOnly: true
    },
    category: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/MusicCategorySerializers'
      }
    },
    music_chord: {
      type: 'array',
      items: {
        $ref: '#/components/schemas/MusicChordSerializers'
      }
    },
    created_at: {
      title: 'Created at',
      type: 'string',
      format: 'date-time',
      readOnly: true
    },
    updated_at: {
      title: 'Updated at',
      type: 'string',
      format: 'date-time',
      readOnly: true
    },
    music_title: {
      title: 'Music title',
      type: 'string',
      maxLength: 100,
      minLength: 1
    },
    author: {
      title: 'Author',
      type: 'string',
      maxLength: 100,
      minLength: 1
    },
    music_tone: {
      title: 'Music tone',
      type: 'string',
      maxLength: 10,
      minLength: 1
    },
    music_text: {
      title: 'Music text',
      type: 'string',
      minLength: 1
    },
    music_link: {
      title: 'Music link',
      type: 'string',
      format: 'uri',
      maxLength: 255
    }
  }
} as const

export const PasswordResetSchema = {
  required: ['token', 'new_password'],
  type: 'object',
  properties: {
    token: {
      title: 'Token',
      type: 'string',
      maxLength: 500,
      minLength: 1
    },
    new_password: {
      title: 'New password',
      type: 'string',
      minLength: 1
    }
  }
} as const

export const PlaylistSerializersSchema = {
  required: ['playlist_name'],
  type: 'object',
  properties: {
    id: {
      title: 'ID',
      type: 'integer',
      readOnly: true
    },
    created_at: {
      title: 'Created at',
      type: 'string',
      format: 'date-time',
      readOnly: true
    },
    updated_at: {
      title: 'Updated at',
      type: 'string',
      format: 'date-time',
      readOnly: true
    },
    playlist_name: {
      title: 'Playlist name',
      type: 'string',
      maxLength: 100
    },
    playlist_date: {
      title: 'Playlist date',
      type: 'string',
      format: 'date',
      default: '2025-04-18'
    },
    music: {
      type: 'array',
      items: {
        type: 'integer'
      },
      uniqueItems: true
    }
  }
} as const

export const PraiseLineupSerializersSchema = {
  type: 'object',
  properties: {
    id: {
      title: 'ID',
      type: 'integer',
      readOnly: true
    },
    created_at: {
      title: 'Created at',
      type: 'string',
      format: 'date-time',
      readOnly: true
    },
    updated_at: {
      title: 'Updated at',
      type: 'string',
      format: 'date-time',
      readOnly: true
    },
    lineup_date: {
      title: 'Lineup date',
      type: 'string',
      format: 'date'
    },
    lineup_event: {
      title: 'Lineup event',
      type: 'string',
      maxLength: 100
    },
    playlist: {
      title: 'Playlist',
      type: 'integer',
      nullable: true
    }
  }
} as const

export const RegisterUserSchema = {
  required: [
    'first_name',
    'last_name',
    'username',
    'password',
    'email',
    'cell_phone',
    'token'
  ],
  type: 'object',
  properties: {
    first_name: {
      title: 'First name',
      type: 'string',
      minLength: 1
    },
    last_name: {
      title: 'Last name',
      type: 'string',
      minLength: 1
    },
    username: {
      title: 'Username',
      type: 'string',
      minLength: 1
    },
    password: {
      title: 'Password',
      type: 'string',
      minLength: 1
    },
    email: {
      title: 'Email',
      type: 'string',
      format: 'email',
      minLength: 1
    },
    cell_phone: {
      title: 'Cell phone',
      type: 'string',
      minLength: 1
    },
    token: {
      title: 'Token',
      type: 'string',
      maxLength: 500,
      minLength: 1
    }
  }
} as const

export const RequestPasswordResetSchema = {
  required: ['username'],
  type: 'object',
  properties: {
    username: {
      title: 'Username',
      type: 'string',
      minLength: 1
    }
  }
} as const

export const GenerateTemporaryTokenSchema = {
  required: ['email'],
  type: 'object',
  properties: {
    email: {
      title: 'Email',
      type: 'string',
      format: 'email',
      minLength: 1
    }
  }
} as const

export const TokenObtainPairSchema = {
  required: ['username', 'password'],
  type: 'object',
  properties: {
    username: {
      title: 'Username',
      type: 'string',
      minLength: 1
    },
    password: {
      title: 'Password',
      type: 'string',
      minLength: 1
    }
  }
} as const

export const TokenRefreshSchema = {
  required: ['refresh'],
  type: 'object',
  properties: {
    refresh: {
      title: 'Refresh',
      type: 'string',
      minLength: 1
    },
    access: {
      title: 'Access',
      type: 'string',
      readOnly: true,
      minLength: 1
    }
  }
} as const
