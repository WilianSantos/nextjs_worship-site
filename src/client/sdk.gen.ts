// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer
} from '@hey-api/client-fetch'
import type {
  PraiseChangePasswordCreateData,
  PraiseChangePasswordCreateResponse,
  PraiseLoginCreateData,
  PraiseLogoutCreateData,
  PraiseMeListData,
  PraiseMeListResponse,
  PraiseMemberFunctionsListData,
  PraiseMemberFunctionsListResponse,
  PraiseMemberFunctionsCreateData,
  PraiseMemberFunctionsCreateResponse,
  PraiseMemberFunctionsDeleteData,
  PraiseMemberFunctionsDeleteResponse,
  PraiseMemberFunctionsReadData,
  PraiseMemberFunctionsReadResponse,
  PraiseMemberFunctionsPartialUpdateData,
  PraiseMemberFunctionsPartialUpdateResponse,
  PraiseMemberFunctionsUpdateData,
  PraiseMemberFunctionsUpdateResponse,
  PraiseMemberListData,
  PraiseMemberListResponse,
  PraiseMemberCreateData,
  PraiseMemberCreateResponse,
  PraiseMemberDeleteData,
  PraiseMemberDeleteResponse,
  PraiseMemberReadData,
  PraiseMemberReadResponse,
  PraiseMemberPartialUpdateData,
  PraiseMemberPartialUpdateResponse,
  PraiseMemberUpdateData,
  PraiseMemberUpdateResponse,
  PraiseMusicCategoryListData,
  PraiseMusicCategoryListResponse,
  PraiseMusicCategoryCreateData,
  PraiseMusicCategoryCreateResponse,
  PraiseMusicCategoryDeleteData,
  PraiseMusicCategoryDeleteResponse,
  PraiseMusicCategoryReadData,
  PraiseMusicCategoryReadResponse,
  PraiseMusicCategoryPartialUpdateData,
  PraiseMusicCategoryPartialUpdateResponse,
  PraiseMusicCategoryUpdateData,
  PraiseMusicCategoryUpdateResponse,
  PraiseMusicChordListData,
  PraiseMusicChordListResponse,
  PraiseMusicChordCreateData,
  PraiseMusicChordCreateResponse,
  PraiseMusicChordDeleteData,
  PraiseMusicChordDeleteResponse,
  PraiseMusicChordReadData,
  PraiseMusicChordReadResponse,
  PraiseMusicChordPartialUpdateData,
  PraiseMusicChordPartialUpdateResponse,
  PraiseMusicChordUpdateData,
  PraiseMusicChordUpdateResponse,
  PraiseMusicListData,
  PraiseMusicListResponse,
  PraiseMusicCreateData,
  PraiseMusicCreateResponse,
  PraiseMusicMostPlayedListData,
  PraiseMusicMusicsData,
  PraiseMusicMusicsResponse,
  PraiseMusicDeleteData,
  PraiseMusicDeleteResponse,
  PraiseMusicReadData,
  PraiseMusicReadResponse,
  PraiseMusicPartialUpdateData,
  PraiseMusicPartialUpdateResponse,
  PraiseMusicUpdateData,
  PraiseMusicUpdateResponse,
  PraisePasswordResetCreateData,
  PraisePasswordResetCreateResponse,
  PraisePlaylistListData,
  PraisePlaylistListResponse,
  PraisePlaylistCreateData,
  PraisePlaylistCreateResponse,
  PraisePlaylistDeleteData,
  PraisePlaylistDeleteResponse,
  PraisePlaylistReadData,
  PraisePlaylistReadResponse,
  PraisePlaylistPartialUpdateData,
  PraisePlaylistPartialUpdateResponse,
  PraisePlaylistUpdateData,
  PraisePlaylistUpdateResponse,
  PraisePraiseLineupListData,
  PraisePraiseLineupListResponse,
  PraisePraiseLineupCreateData,
  PraisePraiseLineupCreateResponse,
  PraisePraiseLineupDeleteData,
  PraisePraiseLineupDeleteResponse,
  PraisePraiseLineupReadData,
  PraisePraiseLineupReadResponse,
  PraisePraiseLineupPartialUpdateData,
  PraisePraiseLineupPartialUpdateResponse,
  PraisePraiseLineupUpdateData,
  PraisePraiseLineupUpdateResponse,
  PraiseRegisterUserCreateData,
  PraiseRequestPasswordResetCreateData,
  PraiseScaleHistoryListData,
  PraiseScaleHistoryListResponse,
  PraiseTokenTemporaryCreateData,
  PraiseUserListData,
  PraiseUserListResponse,
  PraiseUserCreateData,
  PraiseUserCreateResponse,
  PraiseUserDeleteData,
  PraiseUserDeleteResponse,
  PraiseUserReadData,
  PraiseUserReadResponse,
  PraiseUserPartialUpdateData,
  PraiseUserPartialUpdateResponse,
  PraiseUserUpdateData,
  PraiseUserUpdateResponse,
  TokenCreateData,
  TokenCreateResponse,
  TokenRefreshCreateData,
  TokenRefreshCreateResponse
} from './types.gen'
import { client as _heyApiClient } from './client.gen'
import {
  praiseMeListResponseTransformer,
  praiseMemberListResponseTransformer,
  praiseMemberCreateResponseTransformer,
  praiseMemberReadResponseTransformer,
  praiseMemberPartialUpdateResponseTransformer,
  praiseMemberUpdateResponseTransformer,
  praiseMusicListResponseTransformer,
  praiseMusicCreateResponseTransformer,
  praiseMusicMusicsResponseTransformer,
  praiseMusicReadResponseTransformer,
  praiseMusicPartialUpdateResponseTransformer,
  praiseMusicUpdateResponseTransformer,
  praisePlaylistListResponseTransformer,
  praisePlaylistCreateResponseTransformer,
  praisePlaylistReadResponseTransformer,
  praisePlaylistPartialUpdateResponseTransformer,
  praisePlaylistUpdateResponseTransformer,
  praisePraiseLineupListResponseTransformer,
  praisePraiseLineupCreateResponseTransformer,
  praisePraiseLineupReadResponseTransformer,
  praisePraiseLineupPartialUpdateResponseTransformer,
  praisePraiseLineupUpdateResponseTransformer,
  praiseScaleHistoryListResponseTransformer
} from './transformers.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Rota para mudar senha com token.
 */
export const praiseChangePasswordCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<PraiseChangePasswordCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PraiseChangePasswordCreateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/change-password/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praiseLoginCreate = <ThrowOnError extends boolean = false>(
  options?: Options<PraiseLoginCreateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/login/',
    ...options
  })
}

export const praiseLogoutCreate = <ThrowOnError extends boolean = false>(
  options?: Options<PraiseLogoutCreateData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/logout/',
    ...options
  })
}

/**
 * Rota para buscar membro logado.
 */
export const praiseMeList = <ThrowOnError extends boolean = false>(
  options?: Options<PraiseMeListData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PraiseMeListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praiseMeListResponseTransformer,
    url: '/praise/me/',
    ...options
  })
}

export const praiseMemberFunctionsList = <ThrowOnError extends boolean = false>(
  options?: Options<PraiseMemberFunctionsListData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PraiseMemberFunctionsListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/member-functions/',
    ...options
  })
}

export const praiseMemberFunctionsCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<PraiseMemberFunctionsCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PraiseMemberFunctionsCreateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/member-functions/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praiseMemberFunctionsDelete = <
  ThrowOnError extends boolean = false
>(
  options: Options<PraiseMemberFunctionsDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    PraiseMemberFunctionsDeleteResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/member-functions/{id}/',
    ...options
  })
}

export const praiseMemberFunctionsRead = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMemberFunctionsReadData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    PraiseMemberFunctionsReadResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/member-functions/{id}/',
    ...options
  })
}

export const praiseMemberFunctionsPartialUpdate = <
  ThrowOnError extends boolean = false
>(
  options: Options<PraiseMemberFunctionsPartialUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PraiseMemberFunctionsPartialUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/member-functions/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praiseMemberFunctionsUpdate = <
  ThrowOnError extends boolean = false
>(
  options: Options<PraiseMemberFunctionsUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PraiseMemberFunctionsUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/member-functions/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praiseMemberList = <ThrowOnError extends boolean = false>(
  options?: Options<PraiseMemberListData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PraiseMemberListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praiseMemberListResponseTransformer,
    url: '/praise/member/',
    ...options
  })
}

export const praiseMemberCreate = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMemberCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PraiseMemberCreateResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praiseMemberCreateResponseTransformer,
    url: '/praise/member/',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers
    }
  })
}

export const praiseMemberDelete = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMemberDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    PraiseMemberDeleteResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/member/{id}/',
    ...options
  })
}

export const praiseMemberRead = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMemberReadData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    PraiseMemberReadResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praiseMemberReadResponseTransformer,
    url: '/praise/member/{id}/',
    ...options
  })
}

export const praiseMemberPartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMemberPartialUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PraiseMemberPartialUpdateResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praiseMemberPartialUpdateResponseTransformer,
    url: '/praise/member/{id}/',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers
    }
  })
}

export const praiseMemberUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMemberUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PraiseMemberUpdateResponse,
    unknown,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praiseMemberUpdateResponseTransformer,
    url: '/praise/member/{id}/',
    ...options,
    headers: {
      'Content-Type': null,
      ...options?.headers
    }
  })
}

export const praiseMusicCategoryList = <ThrowOnError extends boolean = false>(
  options?: Options<PraiseMusicCategoryListData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PraiseMusicCategoryListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/music-category/',
    ...options
  })
}

export const praiseMusicCategoryCreate = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMusicCategoryCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PraiseMusicCategoryCreateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/music-category/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praiseMusicCategoryDelete = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMusicCategoryDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    PraiseMusicCategoryDeleteResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/music-category/{id}/',
    ...options
  })
}

export const praiseMusicCategoryRead = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMusicCategoryReadData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    PraiseMusicCategoryReadResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/music-category/{id}/',
    ...options
  })
}

export const praiseMusicCategoryPartialUpdate = <
  ThrowOnError extends boolean = false
>(
  options: Options<PraiseMusicCategoryPartialUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PraiseMusicCategoryPartialUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/music-category/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praiseMusicCategoryUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMusicCategoryUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PraiseMusicCategoryUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/music-category/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praiseMusicChordList = <ThrowOnError extends boolean = false>(
  options?: Options<PraiseMusicChordListData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PraiseMusicChordListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/music-chord/',
    ...options
  })
}

export const praiseMusicChordCreate = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMusicChordCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PraiseMusicChordCreateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/music-chord/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praiseMusicChordDelete = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMusicChordDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    PraiseMusicChordDeleteResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/music-chord/{id}/',
    ...options
  })
}

export const praiseMusicChordRead = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMusicChordReadData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    PraiseMusicChordReadResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/music-chord/{id}/',
    ...options
  })
}

export const praiseMusicChordPartialUpdate = <
  ThrowOnError extends boolean = false
>(
  options: Options<PraiseMusicChordPartialUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PraiseMusicChordPartialUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/music-chord/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praiseMusicChordUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMusicChordUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PraiseMusicChordUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/music-chord/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praiseMusicList = <ThrowOnError extends boolean = false>(
  options?: Options<PraiseMusicListData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PraiseMusicListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praiseMusicListResponseTransformer,
    url: '/praise/music/',
    ...options
  })
}

export const praiseMusicCreate = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMusicCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PraiseMusicCreateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praiseMusicCreateResponseTransformer,
    url: '/praise/music/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praiseMusicMostPlayedList = <ThrowOnError extends boolean = false>(
  options?: Options<PraiseMusicMostPlayedListData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      security: [
        {
          scheme: 'basic',
          type: 'http'
        }
      ],
      url: '/praise/music/most-played',
      ...options
    }
  )
}

/**
 * Retorna todas as músicas cadastradas.
 */
export const praiseMusicMusics = <ThrowOnError extends boolean = false>(
  options?: Options<PraiseMusicMusicsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PraiseMusicMusicsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praiseMusicMusicsResponseTransformer,
    url: '/praise/music/musics/',
    ...options
  })
}

export const praiseMusicDelete = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMusicDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    PraiseMusicDeleteResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/music/{id}/',
    ...options
  })
}

export const praiseMusicRead = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMusicReadData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    PraiseMusicReadResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praiseMusicReadResponseTransformer,
    url: '/praise/music/{id}/',
    ...options
  })
}

export const praiseMusicPartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMusicPartialUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PraiseMusicPartialUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praiseMusicPartialUpdateResponseTransformer,
    url: '/praise/music/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praiseMusicUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PraiseMusicUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PraiseMusicUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praiseMusicUpdateResponseTransformer,
    url: '/praise/music/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Rota para redefinir a senha
 */
export const praisePasswordResetCreate = <ThrowOnError extends boolean = false>(
  options: Options<PraisePasswordResetCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PraisePasswordResetCreateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/password-reset/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praisePlaylistList = <ThrowOnError extends boolean = false>(
  options?: Options<PraisePlaylistListData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PraisePlaylistListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praisePlaylistListResponseTransformer,
    url: '/praise/playlist/',
    ...options
  })
}

export const praisePlaylistCreate = <ThrowOnError extends boolean = false>(
  options: Options<PraisePlaylistCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PraisePlaylistCreateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praisePlaylistCreateResponseTransformer,
    url: '/praise/playlist/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praisePlaylistDelete = <ThrowOnError extends boolean = false>(
  options: Options<PraisePlaylistDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    PraisePlaylistDeleteResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/playlist/{id}/',
    ...options
  })
}

export const praisePlaylistRead = <ThrowOnError extends boolean = false>(
  options: Options<PraisePlaylistReadData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    PraisePlaylistReadResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praisePlaylistReadResponseTransformer,
    url: '/praise/playlist/{id}/',
    ...options
  })
}

export const praisePlaylistPartialUpdate = <
  ThrowOnError extends boolean = false
>(
  options: Options<PraisePlaylistPartialUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PraisePlaylistPartialUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praisePlaylistPartialUpdateResponseTransformer,
    url: '/praise/playlist/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praisePlaylistUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PraisePlaylistUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PraisePlaylistUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praisePlaylistUpdateResponseTransformer,
    url: '/praise/playlist/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praisePraiseLineupList = <ThrowOnError extends boolean = false>(
  options?: Options<PraisePraiseLineupListData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PraisePraiseLineupListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praisePraiseLineupListResponseTransformer,
    url: '/praise/praise-lineup/',
    ...options
  })
}

export const praisePraiseLineupCreate = <ThrowOnError extends boolean = false>(
  options: Options<PraisePraiseLineupCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PraisePraiseLineupCreateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praisePraiseLineupCreateResponseTransformer,
    url: '/praise/praise-lineup/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praisePraiseLineupDelete = <ThrowOnError extends boolean = false>(
  options: Options<PraisePraiseLineupDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    PraisePraiseLineupDeleteResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/praise-lineup/{id}/',
    ...options
  })
}

export const praisePraiseLineupRead = <ThrowOnError extends boolean = false>(
  options: Options<PraisePraiseLineupReadData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    PraisePraiseLineupReadResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praisePraiseLineupReadResponseTransformer,
    url: '/praise/praise-lineup/{id}/',
    ...options
  })
}

export const praisePraiseLineupPartialUpdate = <
  ThrowOnError extends boolean = false
>(
  options: Options<PraisePraiseLineupPartialUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PraisePraiseLineupPartialUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praisePraiseLineupPartialUpdateResponseTransformer,
    url: '/praise/praise-lineup/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praisePraiseLineupUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PraisePraiseLineupUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PraisePraiseLineupUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praisePraiseLineupUpdateResponseTransformer,
    url: '/praise/praise-lineup/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Rota para registrar o usuário no banco.
 */
export const praiseRegisterUserCreate = <ThrowOnError extends boolean = false>(
  options: Options<PraiseRegisterUserCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      security: [
        {
          scheme: 'basic',
          type: 'http'
        }
      ],
      url: '/praise/register-user/',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    }
  )
}

/**
 * Rota para gerar um token para redefinir a senha
 */
export const praiseRequestPasswordResetCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<PraiseRequestPasswordResetCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      security: [
        {
          scheme: 'basic',
          type: 'http'
        }
      ],
      url: '/praise/request-password-reset/',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    }
  )
}

/**
 * Rota para retornar o histórico de escalas do membro logado.
 */
export const praiseScaleHistoryList = <ThrowOnError extends boolean = false>(
  options?: Options<PraiseScaleHistoryListData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PraiseScaleHistoryListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    responseTransformer: praiseScaleHistoryListResponseTransformer,
    url: '/praise/scale-history/',
    ...options
  })
}

/**
 * Rota para gerar um token temporário.
 */
export const praiseTokenTemporaryCreate = <
  ThrowOnError extends boolean = false
>(
  options: Options<PraiseTokenTemporaryCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      security: [
        {
          scheme: 'basic',
          type: 'http'
        }
      ],
      url: '/praise/token-temporary/',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers
      }
    }
  )
}

export const praiseUserList = <ThrowOnError extends boolean = false>(
  options?: Options<PraiseUserListData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    PraiseUserListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/user/',
    ...options
  })
}

export const praiseUserCreate = <ThrowOnError extends boolean = false>(
  options: Options<PraiseUserCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PraiseUserCreateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/user/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praiseUserDelete = <ThrowOnError extends boolean = false>(
  options: Options<PraiseUserDeleteData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    PraiseUserDeleteResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/user/{id}/',
    ...options
  })
}

export const praiseUserRead = <ThrowOnError extends boolean = false>(
  options: Options<PraiseUserReadData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    PraiseUserReadResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/user/{id}/',
    ...options
  })
}

export const praiseUserPartialUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PraiseUserPartialUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    PraiseUserPartialUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/user/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const praiseUserUpdate = <ThrowOnError extends boolean = false>(
  options: Options<PraiseUserUpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    PraiseUserUpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/praise/user/{id}/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const tokenCreate = <ThrowOnError extends boolean = false>(
  options: Options<TokenCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    TokenCreateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/token/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

export const tokenRefreshCreate = <ThrowOnError extends boolean = false>(
  options: Options<TokenRefreshCreateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    TokenRefreshCreateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'basic',
        type: 'http'
      }
    ],
    url: '/token/refresh/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}
